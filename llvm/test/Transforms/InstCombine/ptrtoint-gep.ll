; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=instcombine < %s | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

declare void @use_i64(i64)
declare void @use_ptr(ptr)

define i64 @test_basic(ptr %b, i64 %o) {
; CHECK-LABEL: define i64 @test_basic(
; CHECK-SAME: ptr [[B:%.*]], i64 [[O:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[B]] to i64
; CHECK-NEXT:    [[INT:%.*]] = add i64 [[TMP1]], [[O]]
; CHECK-NEXT:    ret i64 [[INT]]
;
  %gep = getelementptr i8, ptr %b, i64 %o
  %int = ptrtoint ptr %gep to i64
  ret i64 %int
}

define i64 @test_multi_index(ptr %b, i64 %o, i64 %o2) {
; CHECK-LABEL: define i64 @test_multi_index(
; CHECK-SAME: ptr [[B:%.*]], i64 [[O:%.*]], i64 [[O2:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[B]] to i64
; CHECK-NEXT:    [[GEP_IDX:%.*]] = shl i64 [[O]], 3
; CHECK-NEXT:    [[GEP_IDX1:%.*]] = shl i64 [[O2]], 2
; CHECK-NEXT:    [[GEP_OFFS:%.*]] = add i64 [[GEP_IDX]], [[GEP_IDX1]]
; CHECK-NEXT:    [[INT:%.*]] = add i64 [[GEP_OFFS]], [[TMP1]]
; CHECK-NEXT:    ret i64 [[INT]]
;
  %gep = getelementptr [0 x [2 x i32]], ptr %b, i64 0, i64 %o, i64 %o2
  %int = ptrtoint ptr %gep to i64
  ret i64 %int
}

define i64 @test_nuw(ptr %b, i64 %o) {
; CHECK-LABEL: define i64 @test_nuw(
; CHECK-SAME: ptr [[B:%.*]], i64 [[O:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[B]] to i64
; CHECK-NEXT:    [[INT:%.*]] = add nuw i64 [[TMP1]], [[O]]
; CHECK-NEXT:    ret i64 [[INT]]
;
  %gep = getelementptr nuw i8, ptr %b, i64 %o
  %int = ptrtoint ptr %gep to i64
  ret i64 %int
}

define i64 @test_nusw(ptr %b, i64 %o) {
; CHECK-LABEL: define i64 @test_nusw(
; CHECK-SAME: ptr [[B:%.*]], i64 [[O:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[B]] to i64
; CHECK-NEXT:    [[INT:%.*]] = add i64 [[TMP1]], [[O]]
; CHECK-NEXT:    ret i64 [[INT]]
;
  %gep = getelementptr nusw i8, ptr %b, i64 %o
  %int = ptrtoint ptr %gep to i64
  ret i64 %int
}

define i64 @test_nusw_nonneg(ptr %b, i64 %o) {
; CHECK-LABEL: define i64 @test_nusw_nonneg(
; CHECK-SAME: ptr [[B:%.*]], i64 [[O:%.*]]) {
; CHECK-NEXT:    [[NONNEG_OFFSET:%.*]] = lshr i64 [[O]], 1
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[B]] to i64
; CHECK-NEXT:    [[INT:%.*]] = add nuw i64 [[NONNEG_OFFSET]], [[TMP1]]
; CHECK-NEXT:    ret i64 [[INT]]
;
  %nonneg_offset = lshr i64 %o, 1
  %gep = getelementptr nusw i8, ptr %b, i64 %nonneg_offset
  %int = ptrtoint ptr %gep to i64
  ret i64 %int
}

; negative test: multiuse
define i64 @test_multiuse(ptr %b, i64 %o) {
; CHECK-LABEL: define i64 @test_multiuse(
; CHECK-SAME: ptr [[B:%.*]], i64 [[O:%.*]]) {
; CHECK-NEXT:    [[GEP:%.*]] = getelementptr i8, ptr [[B]], i64 [[O]]
; CHECK-NEXT:    call void @use_ptr(ptr [[GEP]])
; CHECK-NEXT:    [[INT:%.*]] = ptrtoint ptr [[GEP]] to i64
; CHECK-NEXT:    ret i64 [[INT]]
;
  %gep = getelementptr i8, ptr %b, i64 %o
  call void @use_ptr(ptr %gep)
  %int = ptrtoint ptr %gep to i64
  ret i64 %int
}

; negative test: gep vector
define <2 x i64> @test_gep_vector(<2 x ptr> %b, i64 %o) {
; CHECK-LABEL: define <2 x i64> @test_gep_vector(
; CHECK-SAME: <2 x ptr> [[B:%.*]], i64 [[O:%.*]]) {
; CHECK-NEXT:    [[GEP:%.*]] = getelementptr i8, <2 x ptr> [[B]], i64 [[O]]
; CHECK-NEXT:    [[INT:%.*]] = ptrtoint <2 x ptr> [[GEP]] to <2 x i64>
; CHECK-NEXT:    ret <2 x i64> [[INT]]
;
  %gep = getelementptr i8, <2 x ptr> %b, i64 %o
  %int = ptrtoint <2 x ptr> %gep to <2 x i64>
  ret <2 x i64> %int
}
